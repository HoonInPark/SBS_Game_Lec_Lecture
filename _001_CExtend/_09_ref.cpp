#include <iostream>

using namespace std;

/* C언어에서는 지역변수간에 서로 직접 접근할 수 없다.
*      그래서 포인터 변수를 사용해서 주소를 지정하면 
*      서로 다른 지역에서도 다른 지역의 변수를 가리킬 수 있다.
*  C++에서는 포인터보다 편리한 참조(레퍼런스)변수를 도입했다.
*      참조변수는 다른 지역의 변수에 다른 이름을 붙여서 가리키게 함으로써
*      포인터와 마찬가지로 다른 지역의 변수를 제어할 수 있다.
*  어셈블리어로 보면 C++의 포인터와 참조변수는 내부적으로 포인터로 구성되어
*      있으므로 동일하다. 하지만 소스상에서 보여질 때는 다르게 보여진다.
*  C++에서 참조변수가 도입되었지만, 이미 C언어의 포인터에 익숙해진 
*      프로그래머들은 참조변수보다 여전히 포인터 변수를 선호하고 익숙해한다.
*  참조변수는 Java, C#에서 본격적으로 사용되게 된다.
*     Java는 VM내부에는 포인터가 있지만, 문법에서는 포인터를 전혀 사용하지 않는다.
*     C#은 unsafe처리를 하면 포인터를 사용할 수 있다.
*     그러므로 C#은 Java보다 C/C++의 API/DLL을 훨씬 더 연동해서 많이 사용한다.
*/

void main()
{
	/*num이라는 이름의 변수공간에 100을 입력하라*/
	int num = 100;
	/*ptr의 공간에 num변수의 주소를 저장하라*/
	int* ptr = &num;
	/*앞으로 rNum은 num변수공간을 부르는 또 다른 이름이다
	  참조변수 = 레퍼런스 변수
	*/
	int& rNum = num;

	/* &num : num의 주소
	* int& rNum : rNum은 레퍼런스 변수라는 의미
	*/

	cout << num << endl << *ptr << endl << rNum << endl;
	num = 999;
	cout << num << endl << *ptr << endl << rNum << endl;
	*ptr = 1234;
	cout << num << endl << *ptr << endl << rNum << endl;
	rNum = 9876;
	cout << num << endl << *ptr << endl << rNum << endl;
}